Evaluate the Java expression, picking one of the multiple choice options. The Java expression will follow the next colon, and then the multiple choice options will follow the semi-colon after: Math.sqrt(2.0 * 2); false, true. 0, 0.0, 0.75, 1, 1.0, 2, 2.0, 3, 3.0, compile time error or run-time exception. 
Evaluate the Java expression, picking one of the multiple choice options. The Java expression will follow the next colon, and then the multiple choice options will follow the semi-colon after: 0.0 + 3 / 2 * 2 * 1.0; false, true. 0, 0.0, 0.75, 1, 1.0, 2, 2.0, 3, 3.0, compile time error or run-time exception. 
Evaluate the Java expression, picking one of the multiple choice options. The Java expression will follow the next colon, and then the multiple choice options will follow the semi-colon after: Math.max(2, Math.min(3, 4)) - 2; false, true. 0, 0.0, 0.75, 1, 1.0, 2, 2.0, 3, 3.0, compile time error or run-time exception. 
Evaluate the Java expression, picking one of the multiple choice options. The Java expression will follow the next colon, and then the multiple choice options will follow the semi-colon after: (4 < 2) && (4 < 3) || (2 <= 3 <= 4); false, true. 0, 0.0, 0.75, 1, 1.0, 2, 2.0, 3, 3.0, compile time error or run-time exception. 
Evaluate the Java expression, picking one of the multiple choice options. The Java expression will follow the next colon, and then the multiple choice options will follow the semi-colon after: !((4 < 2) && !!(2 != 3) && !(2 >= 2)); false, true. 0, 0.0, 0.75, 1, 1.0, 2, 2.0, 3, 3.0, compile time error or run-time exception. 
True or false: every variable has a type (such as int, double, or String) that is known at compile time.
True or false: the result of applying one of the arithmetic operators (+, -, *, or /) to two double operands always evaluates to a value of type double (and never produces a run-time exception).
True or false: if you attempt to use a local variable of type int in an expression before that variable has been assigned a value, Java will substitute the value 0.
True or false: if a variable is declared and initialized in the body of a for loop, that variable cannot be accessed outside that loop.
True or false: if you name a variable with all uppercase letters and initialize it to some value, attempting to subsequently change its value would lead to a compile-time error.
Let n be a variable of type int containing a positive integer. The following expression is intended to evaluate to a “random” even integer between 0 (inclusive) and 2n (exclusive). For example, if n is 5, the expression should evaluate to 0, 2, 4, 6, or 8, each with approximately 20% likelihood. True or false: the following expression works as intended – 2 * (int) (n * Math.random()).
Let n be a variable of type int containing a positive integer. The following expression is intended to evaluate to a “random” even integer between 0 (inclusive) and 2n (exclusive). For example, if n is 5, the expression should evaluate to 0, 2, 4, 6, or 8, each with approximately 20% likelihood. True or false: the following expression works as intended – 2 * (int) n * Math.random().
Let n be a variable of type int containing a positive integer. The following expression is intended to evaluate to a “random” even integer between 0 (inclusive) and 2n (exclusive). For example, if n is 5, the expression should evaluate to 0, 2, 4, 6, or 8, each with approximately 20% likelihood. True or false: the following expression works as intended – (int) (2 * n * Math.random()).
Let n be a variable of type int containing a positive integer. The following expression is intended to evaluate to a “random” even integer between 0 (inclusive) and 2n (exclusive). For example, if n is 5, the expression should evaluate to 0, 2, 4, 6, or 8, each with approximately 20% likelihood. True or false: the following expression works as intended – (int) (2 * n * Math.random()) / 2 * 2.
Let n be a variable of type int containing a positive integer. The following expression is intended to evaluate to a “random” even integer between 0 (inclusive) and 2n (exclusive). For example, if n is 5, the expression should evaluate to 0, 2, 4, 6, or 8, each with approximately 20% likelihood. True or false: the following expression works as intended – (int) (2 * n * Math.random()) * 2 / 2.
True or false: after you create and initialize an int[] array, you cannot change its length.
True or false: if a[] is an array of type char[] and length 10, then a[0.0] is a valid expression that gives its first element.
True or false: it is possible to declare, create, and initialize a String[] array without using the keyword new.
True or false: if a[] and b[] are two different arrays of the same type and length, then the expression (a == b) evaluates to true if the corresponding array elements are equal, and false otherwise.
True or false: the elements of an array of type int[] are stored contiguously in the computer’s memory (i.e., in consecutive memory locations).
True, false, or unknown: FACTOR can be solved in exponential time.
True, false, or unknown: SAT can be solved in poly-time but TRAVELING SALESPERSON cannot.
True, false, or unknown: every problem in NP poly-time reduces to SAT.
True, false, or unknown: the halting problem can be solved in exponential time with a Java program on a MacBook Pro running OS X.
True, false, or unknown: P ≠ NP.
